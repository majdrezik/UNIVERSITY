
#include <stdio.h>
#include<math.h>
#include<stdlib.h>
#include <string.h>

#define MAX 100

typedef struct student{
    char *name;             // check if greater than 99
    long ID;
    float matam_deg;
    char homework_deg[5];
    char final_grade;
}student;

typedef struct university{
    student *studs;
    int stud_num;           // number of students in input file
}university;

//Actions
int actionController(char ch,FILE*in,university *uni); //as the name suggest it's a controller based on switch
int actionA(student ** p_array,FILE * fp);
void actionB(student * p_array,int size,FILE *fp);
void actionC(student * p_array,int size,FILE *fp);
void actionD(student * p_array,int size,FILE *fp);
void actionE(student * p_array,int size,FILE *fp);
//help functions
char calculateHomeWork(student *s); // calculate if he got more than 3 homeworks or not
void changehomework(student *s,int hw);//changes the homework at index hw-1 from 1 to 0 or from 0 to 1
float calculatefinal(student *s,char ch);// calculate the final grade
void printOption(int,char*);//is used to print different strings to make the code look nicer
void Error_Msg(char* str);//prints error messages if there was any

int main() {
    
    FILE *in;
    int flag=0,i;// flag = 0 first run , 1 = not first , 2 =end program
    char action;
    university *uni;
    if(!(uni = malloc(sizeof(university))))Error_Msg("can't allocate memory"); // allocate memory for malloc
    if(!(in=fopen("input.txt","r")))Error_Msg("can't open file");// open the file
    while(flag != 2){
        
        printOption(1,"");//menu
        if(flag != 1)printOption(6, "");//option a is first
        
        do{
            printOption(7, "");// enter char
            rewind(stdin);//delete buffer
            action = getchar();
            if(action != 'a' && action != 'A' && flag !=1)printOption(6, "");//check if a ,reprint a is first
            else flag = 1; // is a flag ==1
            
            }while (flag != 1);
        
        flag = actionController(action, in, uni);
    }
    
    for (i=0; i<uni->stud_num; i++) {
        free(uni->studs[i].name); //free name the the rest
    }
    free(uni->studs);
    free(uni);
    fclose(in);
	_getch();
    return 0;
}
int actionController(char ch,FILE*in,university *uni){
    FILE *out;
    switch (ch) {
        case 'a':
        case 'A':
            uni->stud_num = actionA(&uni->studs, in);
            rewind(in);
            printOption(2,"");
            break;
        case 'b':
        case 'B':
            if(!(out=fopen("output.txt","w")))Error_Msg("can't create file"); // we need to create a new file called output
            actionB(uni->studs,uni->stud_num, out);
            fclose(out); // we need to close it so the user can select other actions so we could write new data
            printOption(2,"");
            break;
        case 'c':
        case 'C':
            if(!(out=fopen("output.txt","w")))Error_Msg("can't create file");
            actionC(uni->studs,uni->stud_num, out);
            fclose(out);
            printOption(2,"");
            break;
        case 'd':
        case 'D':
            if(!(out=fopen("output.txt","w")))Error_Msg("can't create file");
            actionD(uni->studs,uni->stud_num, out);
            fclose(out);
            printOption(2,"");
            break;
        case 'e':
        case 'E':
            if(!(out=fopen("output.txt","w")))Error_Msg("can't create file");
            actionE(uni->studs,uni->stud_num, out);
            fclose(out);
            printOption(2,"");
            break;
        case 'f':
        case 'F':
            if(!(out=fopen("output.txt","w")))Error_Msg("can't create file");
            fprintf(out, "End Of Program");
            fclose(out);
            return 2;
            break;
        default:
            printOption(-1, "");
            break;
    }
    return 1;
}

int actionA(student ** p_array,FILE * fp)
{
    student * temp = *p_array, *temp_alloc;
    int i=1;
    char buffer[MAX];//used to store the name for now
    temp = (student*)malloc(sizeof(student));  /*first student's structure allocation*/
    if(temp == NULL)Error_Msg("Allocation failed");
    while(fscanf(fp,"%s %lu %f %s",buffer,&temp[i-1].ID,&temp[i-1].matam_deg,temp[i-1].homework_deg)!=EOF)//get data from the file
    {
        temp[i-1].name = (char*)malloc(strlen(buffer) + 1);   /* allocation by actual size of string*/
        if(temp[i-1].name== NULL)Error_Msg("Name allocation failed");
        strcpy( temp[i-1].name, buffer );
        temp[i-1].final_grade = -1; // this is used to check if a certain actions being preformed before calculating the final (like action c)
        i++;
        temp_alloc = (student*)realloc(temp,(i)*sizeof(student)); // realloc
        if(temp_alloc == NULL)
        {
            free(temp);
            Error_Msg("Reallocation failed");
        }
        else
            temp = temp_alloc;
    }
    *p_array = temp;                   /* Updating the original pointer to array*/
    return i-1;                       /*return the number of students*/
}

void actionB(student* p_array,int size,FILE *fp){
    int i;
    for (i=0; i<size; i++) {
        fprintf(fp, "Student %d: %s %lu %.2f %c\n",i+1,p_array[i].name,p_array[i].ID,p_array[i].matam_deg,calculateHomeWork(&p_array[i]));//print to new file
    }
}
void actionC(student * p_array,int size,FILE *fp){
    int i;
    for (i=0; i<size; i++) {
        fprintf(fp, "Student %d: %s %lu %.2f %d final: %.2f\n",i+1,p_array[i].name,p_array[i].ID,p_array[i].matam_deg,p_array[i].final_grade == -1 ?calculateHomeWork(&p_array[i]):p_array[i].final_grade,calculatefinal(&p_array[i],p_array[i].final_grade));
        //check if it's already calaculated the final_grade if not then do it ,calculate the grade with magen
    }
}
void actionD(student * p_array,int size,FILE *fp){
    float avg,sd,rangeMax=0,rangeMin=100;//those are the max and min grades
    float sum=0;
    int i;
    for (i = 0; i<size; i++) {
        sum += p_array[i].matam_deg;
        if(p_array[i].matam_deg > rangeMax)rangeMax = p_array[i].matam_deg;
        if(p_array[i].matam_deg < rangeMin)rangeMin = p_array[i].matam_deg;
    }
    avg = sum / size;
    sum= 0; //reuse sum
    for (i=0; i<size; i++) {
        sum += ((powf(p_array[i].matam_deg - avg, 2))/size);
    }
    sd = sqrtf(sum);
    
    fprintf(fp, "The average: %.2f\nStandard deviation: %.2f\nNumber of students: %d\nThe range: %.2f - %.2f",avg,sd,size,rangeMax,rangeMin);
}
void actionE(student * p_array,int size,FILE *fp){
    int i,todo,num=1,flag=0;
    char ch;
    for (i =0; i < size; i++) {
        if(num > 0){
            printf("Enter the number of the student to change or any number bellow 0 to go one by one : "); // we did an option for fast navegation
            scanf("%d",&num);
            while(num>size){
                printf("it should be smaller or equal to %d try agian:",size);
                scanf("%d",&num);
            }
        }
        if (num > 1) i = num-1;
        printOption(3,p_array[i].name);//print if you want to change data of student name?
        rewind(stdin);//buffer rest
        ch = getchar();
        if(ch=='q' || ch=='Q')i = size;
        while(ch == 'y' || ch == 'Y'){//if so
            printOption(4, "");//ask what data
            scanf("%d",&todo);
            if(todo > 5)printf("Enter a num between 1 and 5");
            else changehomework(&p_array[i], todo);//change it here
            printOption(5,p_array[i].name);// ask if other data needs to change
            rewind(stdin);//rewind again
            ch = getchar();
        }
        if(num == size)i--;//incase you want to change other student but don't want to stop the loop
    }
    for (i=0; i<size; i++) {//recalculate final_grade and print to file
        fprintf(fp, "Student %d: %s %lu %.2f %c\n",i+1,p_array[i].name,p_array[i].ID,p_array[i].matam_deg,calculateHomeWork(&p_array[i]));
    }
    
}
//-------------------------------
char calculateHomeWork(student *s){
    int i,cnt =0;
    for(i =0 ;i<5;i++){
        if (s->homework_deg[i] == '1')cnt++;
    }
    if(cnt >= 3)return s->final_grade = '1';
    return s->final_grade = '0';
}
void changehomework(student *s,int hw){
    if (s->homework_deg[hw-1] == '0') {
        s->homework_deg[hw-1] = '1';
        return;
    }
    s->homework_deg[hw-1] = '0';
}
float calculatefinal(student *s,char ch){
    if(s->matam_deg >= 55 && s->final_grade == '1'){
        return (15.0 + s->matam_deg * 0.85);
    }
    return s->matam_deg;
}
void printOption(int mode,char *str){
    switch (mode) {
        case 1://menu
            printf("a.input info to program\nb.output homework info\nc.output final grade\nd.show statistics\ne.Change homework status\nf.End program\n");
            break;
        case 2:
            printf("\n---------Action completed---------\n\n");
            break;
            case 3:
            printf("Do you want to change any homework for %s (y) press Q/q to finish this task: ",str);
            break;
        case 4:
            printf("what homework you want to change(1...5): ");
            break;
        case 5:
            printf("Do you want to change anything else for %s (y): ",str);
            break;
            case 6:
            printf("Option 'a' should be choosing first\n");
            break;
            case 7:
            printf("\nEnter your option: ");
            break;
        default:
            printf("unable to find the action\n");
            break;
    }
}
void Error_Msg(char* str)
{
    printf("\n%s",str);
	_getch();
    exit(1);
}
